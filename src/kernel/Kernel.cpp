#include <SFML/OpenGL.hpp>
#include <kernel/Kernel.hpp>
#include <kernel/drivers/RAM.hpp>
#include <kernel/drivers/Audio.hpp>
#include <kernel/drivers/VideoMemory.hpp>
#include <kernel/drivers/RandomMemory.hpp>
#include <algorithm>
#include <iostream>

using namespace std;

unsigned char ___assets_icon_png[] = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
  0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0xcd, 0x00, 0x00, 0x00, 0xcd,
  0x08, 0x02, 0x00, 0x00, 0x00, 0x94, 0xde, 0x63, 0x3e, 0x00, 0x00, 0x04,
  0x2e, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xec, 0xdd, 0xa1, 0x8e, 0x13,
  0x79, 0x1c, 0xc0, 0xf1, 0x72, 0x41, 0xac, 0x40, 0x20, 0x90, 0x3c, 0x01,
  0xc9, 0x99, 0x53, 0x80, 0xdc, 0x84, 0x67, 0xb8, 0x60, 0x49, 0x90, 0x3c,
  0x0b, 0x02, 0x79, 0x09, 0x76, 0xb3, 0xcf, 0x40, 0xb2, 0xee, 0x00, 0x85,
  0xb9, 0x04, 0xcd, 0x23, 0x20, 0x57, 0x9e, 0xdb, 0x8e, 0x60, 0xb2, 0x2d,
  0xed, 0x7c, 0x67, 0xda, 0xf9, 0x7c, 0x54, 0x45, 0x3b, 0xd3, 0x6c, 0xbe,
  0xf9, 0xe7, 0x97, 0xff, 0x74, 0x66, 0x1f, 0x3e, 0x79, 0xf4, 0x74, 0x03,
  0x13, 0xfb, 0x63, 0xee, 0x2f, 0xc0, 0x2a, 0xe8, 0x8c, 0x82, 0xce, 0x28,
  0xe8, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c,
  0x82, 0xce, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c, 0x82, 0xce,
  0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0x3c,
  0x9c, 0xf1, 0xdc, 0xaf, 0x3f, 0x3e, 0xce, 0xce, 0x75, 0xf5, 0xe6, 0xe7,
  0xbd, 0xef, 0x39, 0xd6, 0xf7, 0x79, 0xf7, 0xec, 0xaf, 0xbb, 0xd7, 0x2f,
  0x9f, 0xdf, 0x1c, 0xe5, 0x98, 0xa7, 0xce, 0x7a, 0x46, 0x41, 0x67, 0x14,
  0x74, 0x46, 0x61, 0xce, 0xf9, 0x6c, 0x2e, 0x53, 0xcf, 0x85, 0xb7, 0xd7,
  0xdf, 0x26, 0x3d, 0xfe, 0x29, 0xb2, 0x9e, 0x51, 0xd0, 0x19, 0x05, 0x9d,
  0x51, 0x58, 0xcb, 0x7c, 0x56, 0xee, 0xd5, 0x5d, 0xfc, 0xbd, 0xdd, 0x3f,
  0xbb, 0xd9, 0x6c, 0x67, 0xb5, 0xcb, 0xf7, 0xf7, 0xef, 0xe1, 0x9d, 0x2b,
  0xeb, 0x19, 0x05, 0x9d, 0x51, 0xd0, 0x19, 0x85, 0xb5, 0xcc, 0x67, 0xa5,
  0xe1, 0xfe, 0xd9, 0x70, 0x56, 0xdb, 0xbc, 0x5f, 0xef, 0xb5, 0x4e, 0xeb,
  0x19, 0x05, 0x9d, 0x51, 0xd0, 0x19, 0x05, 0xf3, 0xd9, 0x04, 0xfe, 0x7c,
  0x77, 0xf7, 0xf2, 0xf6, 0xfa, 0xc3, 0xdd, 0xeb, 0xcf, 0x5f, 0x2f, 0x7f,
  0xf9, 0xf6, 0x35, 0xfc, 0x46, 0xcd, 0x7a, 0x46, 0x41, 0x67, 0x14, 0x74,
  0x46, 0xe1, 0xc1, 0x8c, 0xcf, 0xdb, 0x2e, 0xaf, 0x39, 0xce, 0x65, 0x78,
  0xaf, 0xc0, 0xb1, 0x9c, 0xe2, 0x3c, 0x67, 0x3d, 0xa3, 0xa0, 0x33, 0x0a,
  0x3a, 0xa3, 0x60, 0xff, 0x6c, 0x5a, 0x1f, 0xbe, 0x6f, 0xaf, 0x75, 0xbe,
  0xdd, 0x6c, 0xf7, 0xd5, 0x2e, 0x9e, 0xfd, 0xbb, 0xd7, 0x71, 0x4e, 0xfd,
  0x9e, 0x03, 0xeb, 0x19, 0x05, 0x9d, 0x51, 0xd0, 0x19, 0x05, 0xf3, 0x59,
  0xe7, 0x9f, 0xcd, 0xf6, 0x5a, 0xe7, 0xe6, 0xfb, 0xfd, 0xef, 0x7f, 0xfb,
  0xdf, 0xf6, 0xf5, 0xa9, 0xff, 0x8e, 0xcd, 0x7a, 0x46, 0x41, 0x67, 0x14,
  0x74, 0x46, 0xc1, 0x7c, 0xf6, 0x6b, 0x5f, 0x3e, 0xdd, 0x1e, 0xe5, 0x38,
  0x2f, 0x5e, 0x5d, 0xfc, 0xf6, 0x67, 0x87, 0x33, 0x99, 0xfd, 0x33, 0xb8,
  0x9f, 0xce, 0x28, 0xe8, 0x8c, 0xc2, 0xda, 0xe7, 0xb3, 0xb1, 0x39, 0xec,
  0xc7, 0xd5, 0x71, 0xe6, 0xb3, 0x31, 0xbb, 0xcc, 0x6d, 0x63, 0xf7, 0x81,
  0x9e, 0xe2, 0x33, 0x3b, 0xac, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14,
  0xd6, 0x38, 0x9f, 0x0d, 0x67, 0xb2, 0xa9, 0xe7, 0xb0, 0x5d, 0x8e, 0x3f,
  0x3a, 0xab, 0x8d, 0xdc, 0x07, 0x7a, 0x8a, 0xd7, 0x3a, 0xad, 0x67, 0x14,
  0x74, 0x46, 0x41, 0x67, 0x14, 0xd6, 0x78, 0xff, 0xe6, 0x2e, 0xff, 0xeb,
  0xa9, 0xb4, 0xcb, 0xdf, 0x61, 0xdf, 0xfb, 0x40, 0x97, 0x76, 0x8f, 0xa7,
  0xf5, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c, 0xc2, 0x5a, 0xf6, 0xcf, 0x8e,
  0xf5, 0x7b, 0xb2, 0x29, 0x0c, 0xbf, 0xdb, 0xd8, 0x5e, 0xda, 0xbe, 0xf7,
  0x81, 0x8e, 0x3d, 0x6b, 0x6d, 0xa8, 0x9c, 0xe1, 0xac, 0x67, 0x14, 0x74,
  0x46, 0x41, 0x67, 0x14, 0xd6, 0x32, 0x9f, 0x4d, 0x7d, 0x1d, 0xf3, 0x10,
  0xc3, 0xef, 0xb6, 0xcb, 0xef, 0xd2, 0xf6, 0xbd, 0x0f, 0x74, 0x09, 0xac,
  0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14,
  0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46,
  0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67,
  0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74,
  0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41,
  0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14,
  0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46,
  0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67,
  0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74,
  0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41,
  0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0xe6, 0xfc, 0xff, 0xe8, 0x5f,
  0x3e, 0x2d, 0xf7, 0x7f, 0x96, 0xcf, 0xe5, 0x5c, 0xff, 0x26, 0xd6, 0x33,
  0x0a, 0x3a, 0xa3, 0xa0, 0x33, 0x0a, 0x0f, 0x9e, 0x3c, 0x7a, 0x3a, 0xf7,
  0x77, 0xe0, 0xfc, 0x59, 0xcf, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xcc,
  0xb9, 0x7f, 0xf6, 0xf9, 0xeb, 0xe5, 0x5e, 0xef, 0x7f, 0xf9, 0xfc, 0xe6,
  0x28, 0x9f, 0x5d, 0xb2, 0x73, 0xfd, 0x9b, 0x58, 0xcf, 0x28, 0xe8, 0x8c,
  0x82, 0xce, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c, 0x82, 0xce,
  0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xcc,
  0x79, 0x7d, 0xf3, 0xf6, 0xfa, 0xdb, 0x2c, 0x9f, 0x5d, 0xb2, 0x73, 0xfd,
  0x9b, 0x58, 0xcf, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xb8, 0x3f, 0x80,
  0x82, 0xf5, 0x8c, 0x82, 0xce, 0x28, 0xe8, 0x8c, 0xc2, 0x9c, 0xfb, 0x67,
  0xaf, 0x3f, 0x3e, 0x9e, 0xf1, 0xec, 0x5c, 0xbd, 0xf9, 0x99, 0x9d, 0xcb,
  0x7a, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0xc1, 0xf3, 0xcf, 0x28, 0x58,
  0xcf, 0x28, 0xe8, 0x8c, 0x82, 0xce, 0x28, 0xb8, 0xbe, 0x49, 0xc1, 0x7a,
  0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x61, 0xce, 0xfd, 0xb3, 0x29, 0x8c,
  0x3d, 0x03, 0x6c, 0xf8, 0xac, 0xaf, 0xb1, 0xeb, 0xaa, 0x87, 0x5c, 0xef,
  0x3b, 0x95, 0x63, 0xce, 0xc5, 0x7a, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46,
  0xe1, 0x54, 0x7f, 0x7f, 0x36, 0x36, 0xa3, 0x1c, 0x72, 0x0f, 0xe3, 0x2e,
  0xdf, 0x67, 0xdf, 0xd9, 0x68, 0x8a, 0x63, 0x2e, 0xe1, 0x5c, 0xfb, 0xb2,
  0x9e, 0x51, 0xd0, 0x19, 0x05, 0x9d, 0x51, 0x58, 0xe2, 0xfe, 0xd9, 0xd8,
  0xef, 0xd2, 0x5e, 0xbc, 0xba, 0xb8, 0x7b, 0x3d, 0x9c, 0x45, 0x86, 0x33,
  0xc7, 0xe5, 0xfb, 0xdf, 0x9f, 0x3f, 0x0e, 0x39, 0x6f, 0x79, 0xcc, 0xa1,
  0x7d, 0x67, 0xdc, 0x43, 0xce, 0x75, 0x08, 0xeb, 0x19, 0x05, 0x9d, 0x51,
  0xd0, 0x19, 0x85, 0x25, 0xce, 0x67, 0x3f, 0xae, 0xee, 0x9f, 0x69, 0xc6,
  0x1c, 0x72, 0x4d, 0xf0, 0x90, 0xf3, 0x96, 0xc7, 0xdc, 0xc5, 0xd2, 0xee,
  0xbd, 0xb0, 0x9e, 0x51, 0xd0, 0x19, 0x05, 0x9d, 0x51, 0x58, 0xe2, 0x7c,
  0x36, 0x97, 0x5d, 0xf6, 0xa2, 0xf6, 0x9d, 0x7b, 0xa6, 0x38, 0xe6, 0xd8,
  0x67, 0x87, 0x33, 0xdf, 0xd8, 0xfc, 0xe7, 0xfa, 0x26, 0xe7, 0x4c, 0x67,
  0x14, 0x74, 0x46, 0xe1, 0x94, 0x9e, 0xaf, 0xb1, 0xcb, 0xfb, 0x8f, 0xf5,
  0x9e, 0x31, 0x63, 0xfb, 0x61, 0x73, 0x1d, 0x73, 0xec, 0xb3, 0x4b, 0x63,
  0x3d, 0xa3, 0xa0, 0x33, 0x0a, 0x3a, 0xa3, 0xe0, 0xf9, 0x1a, 0x14, 0xac,
  0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14,
  0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46,
  0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0x41, 0x67,
  0x14, 0x74, 0x46, 0x41, 0x67, 0x14, 0x74, 0x46, 0xe1, 0xff, 0x00, 0x00,
  0x00, 0xff, 0xff, 0xd3, 0x04, 0xe6, 0xa4, 0x70, 0x0c, 0xa8, 0x7e, 0x00,
  0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
};
unsigned int ___assets_icon_png_len = 1127;

Kernel::Kernel():
    window(sf::VideoMode(640, 480), "Nibble"),
    lastPid(1),
    lastUsedMemByte(0) {
    // 30 FPS
    window.setFramerateLimit(30);
    // O tamanho virtual da janela é sempre 320x240
    window.setView(sf::View(sf::FloatRect(0, 0, 320, 240)));
    // Não gera múltiplos keypresses se a tecla ficar apertada
    window.setKeyRepeatEnabled(false);
    // Coloca o ícone
    sf::Image Icon;
	if (Icon.loadFromMemory(___assets_icon_png, ___assets_icon_png_len))
        window.setIcon(205, 205, Icon.getPixelsPtr());

	lastUsedMemByte = 0;
	createMemoryMap();
}

void Kernel::reset() {
	audio->stop();
    shutdown();
	startup();
}

void Kernel::shutdown() {
    for (auto process : processes) {
        delete process;
    }
    processes.clear();
}

void Kernel::startup() {
    lastPid = 1;

    audio->play();

    // TODO: Erro quando não conseguir lançar o processo,
    // talvez um pequeno processo codificado em C++ diretamente
    // apenas para mostrar mensagens de erro e coisas parecidas?
    // e.g.: um processo "system"
    if (exec("apps/shell", vector<string>()) > 0) {
        cout << "[kernel] " << "process started" << endl;
    }
}

Kernel::~Kernel() {
    audio->stop();
	destroyMemoryMap();
	shutdown();
	delete gpu;
}

void Kernel::addMemoryDevice(Memory* device) {
    ram.push_back(device);

	cout << "[" << lastUsedMemByte << " - " << lastUsedMemByte+device->size() << "]: ";
	cout << device->name() << endl;

    lastUsedMemByte += device->size();
}

// Mapeia os dispositivos (placa de vídeo, placa de áudio, controles, leds etc)
// para a RAM
void Kernel::createMemoryMap() {
    // Vídeo
    gpu = new GPU(window, 320, 240, lastUsedMemByte);
    addMemoryDevice(gpu->getCommandMemory());
    addMemoryDevice(gpu->getPaletteMemory());
    addMemoryDevice(gpu->getVideoMemory());
    // Gerador de random
    addMemoryDevice(new RandomMemory(lastUsedMemByte));
    // Input (controle, teclado, mouse)
    controller = new Controller(lastUsedMemByte);
    addMemoryDevice((Memory*)controller);
    keyboard = new Keyboard(lastUsedMemByte);
    addMemoryDevice((Memory*)keyboard);
    //mouse = new Mouse(lastUsedMemByte);
    //addMemoryDevice((Memory*)mouse);
    // Audio
    audio = new Audio(lastUsedMemByte);
    addMemoryDevice(audio);
    // RAM
    //addMemoryDevice(new RAM(lastUsedMemByte, 32*1024));
}

void Kernel::destroyMemoryMap() {
    // Deleta todos os dispositivos mapeados em memória
    // exceto aqueles que são processos, que são deletados
    // pelos respectivos processos
    for (auto memory: ram) {
        bool rm = true;

        for (auto process : processes) {
            if (process->getMemory() == memory ||
				memory == gpu->getCommandMemory() ||
				memory == gpu->getPaletteMemory() ||
				memory == gpu->getVideoMemory()) {
                rm = false;
            }
        }

        if (rm) delete memory;
    }

    ram.clear();
}

void Kernel::loop() {
    sf::Clock clock;
    float lastTime = 0;
    
    while (window.isOpen()) {
        float currentTime = clock.getElapsedTime().asSeconds();
        float fps = 1.f / (currentTime - lastTime);
        lastTime = currentTime;
        cerr << fps << "\r";

        sf::Event event;

        // Event handling
        // TODO: passar os eventos correspondentes para seus controladores
        controller->update();
        while (window.pollEvent(event)) {
            switch (event.type) {
                // Fecha a janela no "x" ou alt-f4 etc
            case sf::Event::Closed: {
                window.close();
            }
                break;
                // TODO: Redimensiona e centraliza o vídeo
            case sf::Event::Resized: {
                ((VideoMemory*)gpu->getVideoMemory())->resize();
            }
                break;
                // Teclado
            case sf::Event::TextEntered: {
                keyboard->input(event.text.unicode);
            }
                break;
                // Controle
            case sf::Event::LostFocus: {
                controller->allReleased();
                //mouse->released();
            }
                break;
            case sf::Event::KeyPressed: {
                if (event.key.code == sf::Keyboard::R &&
                    event.key.control) {
					reset();
                } else {
                    controller->kbdPressed(event);
                }
            }
                break;
            case sf::Event::KeyReleased: {
                controller->kbdReleased(event);
            }
                break;
            case sf::Event::JoystickButtonPressed: {
                controller->joyPressed(event);
            }
                break;
            case sf::Event::JoystickButtonReleased: {
                controller->joyReleased(event);
            }
                break;
            case sf::Event::JoystickMoved: {
                controller->joyMoved(event);
            }
                break;
            case sf::Event::JoystickConnected: {
                controller->joyConnected(event);
            }
                break;
            case sf::Event::JoystickDisconnected: {
                controller->joyDisconnected(event);
            }
                break;
            // Mouse
            case sf::Event::MouseButtonPressed: {
                //mouse->pressed();
            }
                break;
            case sf::Event::MouseButtonReleased:
            case sf::Event::MouseLeft: {
                //mouse->released();
            }
                break;
            case sf::Event::MouseMoved: {
                //mouse->moved();
            }
                break;
            default:
                break;
            }
        }

        // Roda o processo no topo da lista de processos
        if (processes.size() > 0) {
            Process *p = processes.back();

            // Traz o cart do processo pra RAM se já não estiver
            if (!p->isMapped()) {
                // TODO: unmap o processo que estava mapeado
                // anteriormente se existir
                ram.push_back(p->getMemory());

                audioMutex.lock();
                p->init();
                audioMutex.unlock();
            } else {
                // Chama as callbacks do processo
                audioMutex.lock();
                p->update();
                p->draw();
                audioMutex.unlock();
            }
        }

        gpu->draw();
        window.display();
    }
}

// Executa "executable" passando "environment"
// executable é um diretório que deve seguir a seguinte organização:
// <cart-name>/
//	- assets/
//  - main.lua
int64_t Kernel::exec(const string& executable, vector<string> environment) {
    Path executablePath(executable);

    // Verifica a existência e estrutura de do cart "executable"
    if (!checkCartStructure(executablePath)) {
        return 0;
    }

    // Cria o processo carregando o cart para a memória na
    // primeira localização livre
    auto process = new Process(executablePath, environment, lastPid++, lastUsedMemByte, (VideoMemory*)gpu->getVideoMemory());

    if (process->isOk()) {
        // Adiciona as chamadas de sistema providas pelo Kernel
        // ao ambiente lua do processo
        process->addSyscalls();

        // Adiciona ao início da pilha de execução de forma que não será
        // executado até que todos os outros saiam ou um yield seja chamado
        // (ou caso esse seja o único processo na pilha)
        processes.push_front(process);

        return process->getPid();
    } else {
        return -1;
    }

    return process->getPid();
}

// Libera o fluxo de controle para "to"
bool Kernel::yield(const uint64_t pid, const uint64_t to) {
    return false;
}

void Kernel::exit(const uint64_t pid) {
    for (auto process : processes) {
        if (process->getPid() == pid) {
            processes.remove(process);
            break;
        }
    }
}

void Kernel::audio_tick(uint8_t channel) {
    // Roda o processo no topo da lista de processos
    if (processes.size() > 0) {
        Process *p = processes.back();

        // Traz o cart do processo pra RAM se já não estiver
        if (!p->isMapped()) {
            // TODO: unmap o processo que estava mapeado
            // anteriormente se existir
            ram.push_back(p->getMemory());
        }

        audioMutex.lock();
        p->audio_tick(channel);
        audioMutex.unlock();
    }
}

// API de acesso à memória
uint64_t Kernel::write(uint64_t start, const uint8_t* data, uint64_t size) {
    uint64_t end = start + size;
    // Quantos bytes foram escritos
    uint64_t written = 0;

    if (start > end) {
        uint64_t buffer = end;
        end = start;
        start = buffer;
    }

    if (start > lastUsedMemByte) {
        start = lastUsedMemByte;
        size = end - start;
    }

    if (end > lastUsedMemByte) {
        end = lastUsedMemByte;
        size = end - start;
    }

    // Segmenta o write para cada bloco de ram em que ele afetar
    for (auto memBlock : ram) {
        uint64_t blkStart = memBlock->addr(), blkSize = memBlock->size();
        uint64_t blkEnd = blkStart + blkSize;

        // Verifica se o write afeta esse bloco de memória
        if (blkEnd > start && blkStart < end) {
            // Calcula as boundaries do write para atingir apenas esse bloco
            uint64_t writeStart, writeEnd;

            if (blkStart < start) {
                writeStart = start;
            }
            else {
                writeStart = blkStart;
            }

            if (blkEnd > end) {
                writeEnd = end;
            }
            else {
                writeEnd = blkEnd;
            }

            // Executa um write apenas nesse bloco
            written += memBlock->write(writeStart-blkStart, data+(writeStart-start), writeEnd - writeStart);
        }
    }

    return written;
}

string Kernel::read(uint64_t start, uint64_t size) {
    uint64_t end = start + size;
    // Quantos bytes foram lidos
    uint64_t numRead = 0;

    if (start > end) {
        uint64_t buffer = end;
        end = start;
        start = buffer;
    }

    if (start > lastUsedMemByte) {
        start = lastUsedMemByte;
        size = end - start;
    }

    if (end > lastUsedMemByte) {
        end = lastUsedMemByte;
        size = end - start;
    }

    string stringBuffer((size_t)size, '\0');
    uint8_t* buffer = (uint8_t*)&stringBuffer[0];

    // Segmenta o read para cada bloco de ram em que ele afetar
    for (auto memBlock : ram) {
        uint64_t blkStart = memBlock->addr(), blkSize = memBlock->size();
        uint64_t blkEnd = blkStart + blkSize;

        // Verifica se o read afeta esse bloco de memória
        if (blkEnd > start && blkStart < end) {
            // Calcula as boundaries do read para atingir apenas esse bloco
            uint64_t readStart, readEnd;

            if (blkStart < start) {
                readStart = start;
            }
            else {
                readStart = blkStart;
            }

            if (blkEnd > end) {
                readEnd = end;
            }
            else {
                readEnd = blkEnd;
            }

            // Executa um read apenas nesse bloco
            numRead += memBlock->read(readStart - blkStart, buffer + (readStart - start), readEnd - readStart);
        }
    }

    return stringBuffer.substr(0, numRead);
}

bool Kernel::checkCartStructure(Path& root) {
    cout << "[kernel] " << "checking cart " << root.getPath() << endl;

    Path lua = root.resolve(Process::LuaEntryPoint);
    Path assets = root.resolve(Process::AssetsEntryPoint);

    cout << "	" << " checking if dir " << assets.getPath() << endl;
    cout << "	" << " checking if file " << lua.getPath() << endl;

    return fs::isDir(root) &&
        fs::isDir(assets) &&
        !fs::isDir(lua);
}

// Wrapper estático para a API
unsigned long kernel_api_write(unsigned long to, const string data) {
    return (unsigned long)KernelSingleton->write(to, (uint8_t*)data.data(), data.size());
}

string kernel_api_read(const unsigned long from, const unsigned long amount) {
    return KernelSingleton->read(from, amount);
}
